"""
Commande pour initialiser les r√¥les par d√©faut du syst√®me.
Usage: python manage.py init_roles
"""
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from accounts.models import UserRole, CooperativeAccess
from django.contrib.auth.models import User


class Command(BaseCommand):
    help = 'Initialise les r√¥les par d√©faut pour le syst√®me de coop√©ratives'

    def add_arguments(self, parser):
        parser.add_argument(
            '--reset',
            action='store_true',
            help='Remet √† z√©ro tous les r√¥les existants',
        )

    def handle(self, *args, **options):
        with transaction.atomic():
            if options['reset']:
                self.stdout.write('Suppression des r√¥les existants...')
                UserRole.objects.all().delete()

            # D√©finition des r√¥les par d√©faut
            roles_data = [
                {
                    'name': 'admin',
                    'display_name': 'Administrateur',
                    'description': 'Acc√®s complet au syst√®me, gestion des utilisateurs et param√®tres',
                    'color': '#dc3545',
                    'priority': 1,
                    'permissions': {
                        'can_access_admin': True,
                        'can_view_reports': True,
                        'can_manage_members': True,
                        'can_manage_inventory': True,
                        'can_manage_sales': True,
                        'can_manage_finance': True,
                        'can_validate_transactions': True,
                    }
                },
                {
                    'name': 'manager',
                    'display_name': 'Gestionnaire',
                    'description': 'Gestion op√©rationnelle de la coop√©rative, rapports et supervision',
                    'color': '#fd7e14',
                    'priority': 2,
                    'permissions': {
                        'can_access_admin': True,
                        'can_view_reports': True,
                        'can_manage_members': True,
                        'can_manage_inventory': True,
                        'can_manage_sales': True,
                        'can_manage_finance': False,
                        'can_validate_transactions': True,
                    }
                },
                {
                    'name': 'accountant',
                    'display_name': 'Comptable',
                    'description': 'Gestion financi√®re, comptabilit√© et transactions',
                    'color': '#20c997',
                    'priority': 3,
                    'permissions': {
                        'can_access_admin': False,
                        'can_view_reports': True,
                        'can_manage_members': False,
                        'can_manage_inventory': False,
                        'can_manage_sales': False,
                        'can_manage_finance': True,
                        'can_validate_transactions': True,
                    }
                },
                {
                    'name': 'salesperson',
                    'display_name': 'Vendeur',
                    'description': 'Gestion des ventes et des clients',
                    'color': '#0d6efd',
                    'priority': 4,
                    'permissions': {
                        'can_access_admin': False,
                        'can_view_reports': False,
                        'can_manage_members': False,
                        'can_manage_inventory': False,
                        'can_manage_sales': True,
                        'can_manage_finance': False,
                        'can_validate_transactions': False,
                    }
                },
                {
                    'name': 'stockkeeper',
                    'display_name': 'Gestionnaire de Stock',
                    'description': 'Gestion de l\'inventaire et des mouvements de stock',
                    'color': '#6f42c1',
                    'priority': 5,
                    'permissions': {
                        'can_access_admin': False,
                        'can_view_reports': False,
                        'can_manage_members': False,
                        'can_manage_inventory': True,
                        'can_manage_sales': False,
                        'can_manage_finance': False,
                        'can_validate_transactions': False,
                    }
                },
                {
                    'name': 'member',
                    'display_name': 'Membre',
                    'description': 'Membre de la coop√©rative avec acc√®s limit√©',
                    'color': '#198754',
                    'priority': 6,
                    'permissions': {
                        'can_access_admin': False,
                        'can_view_reports': False,
                        'can_manage_members': False,
                        'can_manage_inventory': False,
                        'can_manage_sales': False,
                        'can_manage_finance': False,
                        'can_validate_transactions': False,
                    }
                },
                {
                    'name': 'visitor',
                    'display_name': 'Visiteur',
                    'description': 'Acc√®s minimal au syst√®me',
                    'color': '#6c757d',
                    'priority': 7,
                    'permissions': {
                        'can_access_admin': False,
                        'can_view_reports': False,
                        'can_manage_members': False,
                        'can_manage_inventory': False,
                        'can_manage_sales': False,
                        'can_manage_finance': False,
                        'can_validate_transactions': False,
                    }
                },
            ]

            created_count = 0
            updated_count = 0

            for role_data in roles_data:
                permissions = role_data.pop('permissions')
                
                # Fusionner les permissions avec les donn√©es de base
                role_defaults = {**role_data, **permissions}
                
                role, created = UserRole.objects.get_or_create(
                    name=role_data['name'],
                    defaults=role_defaults
                )
                
                if created:
                    created_count += 1
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úì R√¥le cr√©√©: {role.display_name}')
                    )
                else:
                    # Mise √† jour des permissions si le r√¥le existe d√©j√†
                    updated = False
                    for key, value in role_defaults.items():
                        if hasattr(role, key) and getattr(role, key) != value:
                            setattr(role, key, value)
                            updated = True
                    
                    if updated:
                        role.save()
                        updated_count += 1
                        self.stdout.write(
                            self.style.WARNING(f'‚Üª R√¥le mis √† jour: {role.display_name}')
                        )
                    else:
                        self.stdout.write(
                            self.style.HTTP_INFO(f'‚Üí R√¥le inchang√©: {role.display_name}')
                        )

            self.stdout.write('\n' + '='*50)
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚úÖ Initialisation termin√©e !\n'
                    f'   - {created_count} r√¥les cr√©√©s\n'
                    f'   - {updated_count} r√¥les mis √† jour'
                )
            )
            
            # Mise √† jour du profil admin si il existe
            try:
                admin_user = User.objects.filter(is_superuser=True).first()
                if admin_user and hasattr(admin_user, 'profile'):
                    admin_role = UserRole.objects.get(name='admin')
                    admin_user.profile.role = admin_role
                    admin_user.profile.save()
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úì R√¥le admin assign√© √† {admin_user.username}')
                    )
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f'‚ö† Impossible d\'assigner le r√¥le admin: {e}')
                )

            self.stdout.write('\n' + self.style.SUCCESS('üéâ Configuration des r√¥les termin√©e !'))